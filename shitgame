#!/bin/python3.10
from getpass import getpass
from math import floor
from random import randint
from time import sleep, time
from sys import exit
from os import system, name
from threading import Thread

try:
    from scrap_engine import Object, Map, screen_height, screen_width, Text, Box
except:
    _in = input("failed to import engine, do you want to install it? (Y/n)")
    if _in == "Y" or "":
        system("pip3 install --user scrap_engine")
    else:
        exit()
try:
    from pynput import keyboard
except:
    _in = input("failed to import keyboard library, want to install it? (Y/n)")
    if _in == "Y" or "":
        system("pip3 install --user pynput")

from modules.client import Client
from modules.host import Host

# initialization
ur_combination = {"up", "right", "space"}
u_combination = {"up", "space"}
ul_combination = {"up", "left", "space"}
l_combination = {"left", "space"}
dl_combination = {"down", "left", "space"}
d_combination = {"down", "space"}
dr_combination = {"down", "right", "space"}
r_combination = {"right", "space"}
current_keys = set()
projectiles:list[tuple[Text, str]] = list()
alive_projectiles:list[tuple[Text, str]] = list()
map:Map
player:Box
enemies:list[Thread] = []
score:int = 0
debug = False
running = True

# specific function definitions
def projectile_builder(direction:str) -> tuple[Text, str]:
    global map
    match direction:
        case "up":
            projectile = Object(char="▲")
            projectile.add(map, player.x + int(len(player.obs)/2), player.y-1)
        case "upright":
            projectile = Object(char="◥")
            projectile.add(map, player.x+ len(player.obs), player.y-1)
        case "left":
            projectile = Object(char="◀")
            projectile.add(map, player.x-1, player.y)
        case "upleft":
            projectile = Object(char="◤")
            projectile.add(map, player.x-1, player.y-1)
        case "down":
            projectile = Object(char="▼")
            projectile.add(map, player.x + int(len(player.obs)/2), player.y+1)
        case "downleft":
            projectile = Object(char="◣")
            projectile.add(map, player.x-1, player.y+1)
        case "right":
            projectile = Object(char="▶")
            projectile.add(map, player.x + len(player.obs), player.y)
        case "downright":
            projectile = Object(char="◢")
            projectile.add(map, player.x + len(player.obs), player.y+1)
    return projectile, direction

def projectile_move(projectile:tuple[Object, str]):
    global map, alive_projectiles, running
    alive = True
    while alive and running:
        match projectile[1]:
            case "up":
                projectile[0].set(projectile[0].x, projectile[0].y-1)
            case "upright":
                projectile[0].set(projectile[0].x+1, projectile[0].y-1)
            case "left":
                projectile[0].set(projectile[0].x-1, projectile[0].y)
            case "upleft":
                projectile[0].set(projectile[0].x-1, projectile[0].y-1)
            case "down":
                projectile[0].set(projectile[0].x, projectile[0].y+1)
            case "downleft":
                projectile[0].set(projectile[0].x-1, projectile[0].y+1)
            case "right":
                projectile[0].set(projectile[0].x+1, projectile[0].y)
            case "downright":
                projectile[0].set(projectile[0].x+1, projectile[0].y+1)
        if projectile[0].y == 1 or projectile[0].x == 1 or projectile[0].y == screen_height-3 or projectile[0].x == screen_width-2:
            projectile[0].remove()
            alive_projectiles.remove(projectile)
            alive = False
        sleep(.01)
        map.show()

def enemy_handle():
    global score
    if running:
        enemy = Box(1,3)
        character = ";-;"
        [enemy.add_ob(Object(character[i]), i,0) for i in range(len(character))]
        enemy.add(map, randint(1, screen_width-(len(player.obs)-1)), randint(1,screen_height-3))
        alive = True
        while alive:
            direction = randint(0,3)
            match direction:
                case 0: #up
                    enemy.set(enemy.x, enemy.y-1)
                case 1: #left
                    enemy.set(enemy.x-1, enemy.y)
                case 2: #down
                    enemy.set(enemy.x, enemy.y+1)
                case 3: #right
                    enemy.set(enemy.x+1, enemy.y)
            for projectile in alive_projectiles:
                if projectile[0].x <= enemy.x+len(enemy.obs)+1 and \
                    projectile[0].x + 2 >= enemy.x and \
                    projectile[0].y <= enemy.y+2 and \
                    projectile[0].y + 2 >= enemy.y:
                    alive = False
            sleep(.1)
        score +=1
        scoretext.rechar(f'Score: {str(score)}')
        enemy.remove()

def keep_alive():
    global running
    getpass(prompt="")
    running = False
    exit()

# listener functions
def on_press(key:keyboard.KeyCode | keyboard.Key):
    global projectiles, current_keys
    try:
        k = key.char
    except:
        k = key.name
    if not k in current_keys and (k in u_combination or l_combination or d_combination or r_combination):
        current_keys.add(k)
    match k:
        case "w":
            if not player.y <= 1:
                tmp = player.y - 1
                player.set(player.x, tmp)
        case "a":
            if not player.x <= 1:
                tmp = player.x - 1
                player.set(tmp, player.y)
        case "s":
            if not player.y >= screen_height-3:
                tmp = player.y + 1
                player.set(player.x, tmp)
        case "d":
            if not player.x >= screen_width-(len(player.obs)+1):
                tmp = player.x + 1
                player.set(tmp, player.y)
    if current_keys == u_combination and player.y > 1:
        projectiles.append(projectile_builder("up"))
    elif current_keys == ur_combination and player.y > 1 and player.x < screen_width - (len(player.obs) + 1):
        projectiles.append(projectile_builder("upright"))
    elif current_keys == l_combination and player.x > 1:
        projectiles.append(projectile_builder("left"))
    elif current_keys == ul_combination and player.y > 1 and player.x > 1:
        projectiles.append(projectile_builder("upleft"))
    elif current_keys == d_combination and player.y < screen_height-3:
        projectiles.append(projectile_builder("down"))
    elif current_keys == dl_combination and player.y < screen_height-3 and player.x > 1:
        projectiles.append(projectile_builder("downleft"))
    elif current_keys == r_combination and player.x < screen_width - (len(player.obs) + 1):
        projectiles.append(projectile_builder("right"))
    elif current_keys == dr_combination and player.y < screen_height-3 and player.x < screen_width - (len(player.obs) + 1):
        projectiles.append(projectile_builder("downright"))
    map.show()

def on_release(key:keyboard.Key | keyboard.KeyCode):
    global current_keys
    try:
        k = key.char
    except:
        k = key.name
    if k in current_keys:
        current_keys.remove(k)

if __name__ == "__main__":
    #start menu
    start_msg = "______________________________SHITGAME!______________________________\n"+\
    "Controls:\n"+\
    "w:                   Move up\n"+\
    "a:                   Move left\n"+\
    "s:                   Move down\n"+\
    "d:                   Move right\n"+\
    "Space + arrow key:   Shoot in a direction\n"+\
    "Enter:               Exit the game\n\n"+\
    "Script states:\n"+\
    "1:                   host TBD\n"+\
    "2:                   client TBD\n"+\
    "3:                   single player\n"
    states = ["host", "client", "single player"]
    script_state = "single player"
    character = "( ͡° ͜ʖ ͡°)"
    enemy_character = ";-;"
    frequency = 2 #s
    while True:
        system("cls" if name == "nt" else "clear")
        print(start_msg)
        _in = input(f'choose the state of this script (leave blank to confirm, current={script_state}): ')
        if _in == "":
            break
        try:
            state = states[int(_in)-1]
        except:
            print("input is invalid")
            sleep(1)
        script_state = state

    while True:
        system("cls" if name == "nt" else "clear")
        print(start_msg)
        char = input(f'type your character (leave blank to confirm, current={character}): ') 
        if char == "":
            break
        character = char
    while True:
        system("cls" if name == "nt" else "clear")
        print(start_msg)
        char = input(f'type your enemy characters (leave blank to confirm, current={enemy_character}): ')
        if char == "":
            break
        enemy_character = char
    while True:
        system("cls" if name == "nt" else "clear")
        print(start_msg)
        freq = input(f'type your preferred spawn frequency (leave blank to confirm, current={frequency}): ')
        if freq == "":
            break
        try:
            frequency = int(freq)
        except:
            print("input is invalid")
            sleep(1)

    # gamestates:
    match script_state:
        case "host":
            host = Host()
        case "client":
            client = Client()
        case "single player":
            pass

    #init
    player = Box(1,8)
    [player.add_ob(Object(character[i]), i,0) for i in range(len(character))]
    map = Map(background=" ")
    map.show(init=True)
    player.add(map, randint(1, screen_width-(len(player.obs)-1)), randint(1,screen_height-3))
    game_title = " SHITGAME! "
    box = Box(screen_height, screen_width)
    [box.add_ob(Object(char="#"), i, screen_height-2) for i in range(screen_width)]
    [box.add_ob(Object(char="#"), screen_width-1, i) for i in range(screen_height-1)]
    box.add_ob(Text(text=game_title),int(screen_width/2-len(game_title)/2), 0)
    [box.add_ob(Object(char="#"), i, 0) for i in range(screen_width)]
    [box.add_ob(Object(char="#"), 0, i) for i in range(1, screen_height-1)]
    box.add(map, 0, 0)
    scoretext = Text(f'Score: {score}')
    scoretext.add(map, 1,1)

    listener = keyboard.Listener(on_press=on_press, on_release=on_release)
    listener.start()

    Thread(target=keep_alive).start()

    if script_state == "client":
        client.player = player
        send_thread = Thread(target=client.sendpos)
        send_thread.start()

    t_now = time()
    spawn_timer = Text(f'Spawn timer: ')
    spawn_timer.add(map,1,2)
    while running:
        spawn_timer.rechar(f'Spawn timer: {floor((t_now+frequency)-time())+1}')
        if t_now + frequency < time() and not debug:
            enemies.append(Thread(target=enemy_handle))
            enemies[len(enemies)-1].start()
            t_now = time()
        if len(projectiles) > 0:
            for projectile in projectiles:
                projectiles.remove(projectile) 
                Thread(target=projectile_move,args=(projectile,)).start()
                alive_projectiles.append(projectile)
        map.show()
        sleep(.1)
